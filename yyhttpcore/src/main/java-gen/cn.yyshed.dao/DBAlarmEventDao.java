package cn.yyshed.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import cn.yyshed.dao.DBAlarmEvent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DBALARM_EVENT.
*/
public class DBAlarmEventDao extends AbstractDao<DBAlarmEvent, Long> {

    public static final String TABLENAME = "DBALARM_EVENT";

    /**
     * Properties of entity DBAlarmEvent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Event_id = new Property(1, String.class, "event_id", false, "EVENT_ID");
        public final static Property Event_date = new Property(2, java.util.Date.class, "event_date", false, "EVENT_DATE");
        public final static Property Event_level = new Property(3, String.class, "event_level", false, "EVENT_LEVEL");
        public final static Property Event_type = new Property(4, String.class, "event_type", false, "EVENT_TYPE");
        public final static Property Event_name = new Property(5, String.class, "event_name", false, "EVENT_NAME");
        public final static Property Beread = new Property(6, Byte.class, "beread", false, "BEREAD");
        public final static Property Event_state = new Property(7, String.class, "event_state", false, "EVENT_STATE");
        public final static Property Detail = new Property(8, String.class, "detail", false, "DETAIL");
        public final static Property CreatedAt = new Property(9, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(10, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
        public final static Property User_name = new Property(11, String.class, "user_name", false, "USER_NAME");
        public final static Property Smartgate_sn = new Property(12, String.class, "smartgate_sn", false, "SMARTGATE_SN");
        public final static Property Smartgate_name = new Property(13, String.class, "smartgate_name", false, "SMARTGATE_NAME");
        public final static Property Device_sn = new Property(14, String.class, "device_sn", false, "DEVICE_SN");
        public final static Property Sn = new Property(15, String.class, "sn", false, "SN");
    }


    public DBAlarmEventDao(DaoConfig config) {
        super(config);
    }
    
    public DBAlarmEventDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DBALARM_EVENT' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'EVENT_ID' TEXT UNIQUE ," + // 1: event_id
                "'EVENT_DATE' INTEGER," + // 2: event_date
                "'EVENT_LEVEL' TEXT," + // 3: event_level
                "'EVENT_TYPE' TEXT," + // 4: event_type
                "'EVENT_NAME' TEXT," + // 5: event_name
                "'BEREAD' INTEGER," + // 6: beread
                "'EVENT_STATE' TEXT," + // 7: event_state
                "'DETAIL' TEXT," + // 8: detail
                "'CREATED_AT' INTEGER," + // 9: createdAt
                "'UPDATED_AT' INTEGER," + // 10: updatedAt
                "'USER_NAME' TEXT," + // 11: user_name
                "'SMARTGATE_SN' TEXT," + // 12: smartgate_sn
                "'SMARTGATE_NAME' TEXT," + // 13: smartgate_name
                "'DEVICE_SN' TEXT," + // 14: device_sn
                "'SN' TEXT);"); // 15: sn
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DBALARM_EVENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBAlarmEvent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String event_id = entity.getEvent_id();
        if (event_id != null) {
            stmt.bindString(2, event_id);
        }
 
        java.util.Date event_date = entity.getEvent_date();
        if (event_date != null) {
            stmt.bindLong(3, event_date.getTime());
        }
 
        String event_level = entity.getEvent_level();
        if (event_level != null) {
            stmt.bindString(4, event_level);
        }
 
        String event_type = entity.getEvent_type();
        if (event_type != null) {
            stmt.bindString(5, event_type);
        }
 
        String event_name = entity.getEvent_name();
        if (event_name != null) {
            stmt.bindString(6, event_name);
        }
 
        Byte beread = entity.getBeread();
        if (beread != null) {
            stmt.bindLong(7, beread);
        }
 
        String event_state = entity.getEvent_state();
        if (event_state != null) {
            stmt.bindString(8, event_state);
        }
 
        String detail = entity.getDetail();
        if (detail != null) {
            stmt.bindString(9, detail);
        }
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(10, createdAt.getTime());
        }
 
        java.util.Date updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindLong(11, updatedAt.getTime());
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(12, user_name);
        }
 
        String smartgate_sn = entity.getSmartgate_sn();
        if (smartgate_sn != null) {
            stmt.bindString(13, smartgate_sn);
        }
        
        String smartgate_name = entity.getSmartgate_name();
        if (smartgate_name != null) {
            stmt.bindString(14, smartgate_name);
        }
 
        String device_sn = entity.getDevice_sn();
        if (device_sn != null) {
            stmt.bindString(15, device_sn);
        }
 
        String sn = entity.getSn();
        if (sn != null) {
            stmt.bindString(16, sn);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBAlarmEvent readEntity(Cursor cursor, int offset) {
        DBAlarmEvent entity = new DBAlarmEvent( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // event_id
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // event_date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // event_level
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // event_type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // event_name
            cursor.isNull(offset + 6) ? null : (byte) cursor.getShort(offset + 6), // beread
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // event_state
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // detail
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // createdAt
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // updatedAt
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // user_name
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // smartgate_sn
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // smartgate_name
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // device_sn
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // sn
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBAlarmEvent entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEvent_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEvent_date(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setEvent_level(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEvent_type(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEvent_name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBeread(cursor.isNull(offset + 6) ? null : (byte) cursor.getShort(offset + 6));
        entity.setEvent_state(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDetail(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreatedAt(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setUpdatedAt(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setUser_name(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSmartgate_sn(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSmartgate_name(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDevice_sn(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSn(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBAlarmEvent entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBAlarmEvent entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
